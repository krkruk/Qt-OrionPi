// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: roverToEarthBaseComm.proto

#ifndef PROTOBUF_roverToEarthBaseComm_2eproto__INCLUDED
#define PROTOBUF_roverToEarthBaseComm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "earthBaseToRoverComm.pb.h"
// @@protoc_insertion_point(includes)
namespace ORION_COMM {
class Chassis;
class ChassisDefaultTypeInternal;
extern ChassisDefaultTypeInternal _Chassis_default_instance_;
class ChassisTelemetry;
class ChassisTelemetryDefaultTypeInternal;
extern ChassisTelemetryDefaultTypeInternal _ChassisTelemetry_default_instance_;
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Feedback;
class FeedbackDefaultTypeInternal;
extern FeedbackDefaultTypeInternal _Feedback_default_instance_;
class WheelTelemetry;
class WheelTelemetryDefaultTypeInternal;
extern WheelTelemetryDefaultTypeInternal _WheelTelemetry_default_instance_;
}  // namespace ORION_COMM

namespace ORION_COMM {

namespace protobuf_roverToEarthBaseComm_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_roverToEarthBaseComm_2eproto

// ===================================================================

class WheelTelemetry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ORION_COMM.WheelTelemetry) */ {
 public:
  WheelTelemetry();
  virtual ~WheelTelemetry();

  WheelTelemetry(const WheelTelemetry& from);

  inline WheelTelemetry& operator=(const WheelTelemetry& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WheelTelemetry& default_instance();

  static inline const WheelTelemetry* internal_default_instance() {
    return reinterpret_cast<const WheelTelemetry*>(
               &_WheelTelemetry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(WheelTelemetry* other);

  // implements Message ----------------------------------------------

  inline WheelTelemetry* New() const PROTOBUF_FINAL { return New(NULL); }

  WheelTelemetry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WheelTelemetry& from);
  void MergeFrom(const WheelTelemetry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WheelTelemetry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double angularVelocity = 2;
  void clear_angularvelocity();
  static const int kAngularVelocityFieldNumber = 2;
  double angularvelocity() const;
  void set_angularvelocity(double value);

  // double current = 3;
  void clear_current();
  static const int kCurrentFieldNumber = 3;
  double current() const;
  void set_current(double value);

  // int32 ID = 1;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 pwm = 5;
  void clear_pwm();
  static const int kPwmFieldNumber = 5;
  ::google::protobuf::int32 pwm() const;
  void set_pwm(::google::protobuf::int32 value);

  // double heatSinkTemperature = 4;
  void clear_heatsinktemperature();
  static const int kHeatSinkTemperatureFieldNumber = 4;
  double heatsinktemperature() const;
  void set_heatsinktemperature(double value);

  // int32 errorCode = 6;
  void clear_errorcode();
  static const int kErrorCodeFieldNumber = 6;
  ::google::protobuf::int32 errorcode() const;
  void set_errorcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ORION_COMM.WheelTelemetry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double angularvelocity_;
  double current_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 pwm_;
  double heatsinktemperature_;
  ::google::protobuf::int32 errorcode_;
  mutable int _cached_size_;
  friend struct protobuf_roverToEarthBaseComm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChassisTelemetry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ORION_COMM.ChassisTelemetry) */ {
 public:
  ChassisTelemetry();
  virtual ~ChassisTelemetry();

  ChassisTelemetry(const ChassisTelemetry& from);

  inline ChassisTelemetry& operator=(const ChassisTelemetry& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChassisTelemetry& default_instance();

  static inline const ChassisTelemetry* internal_default_instance() {
    return reinterpret_cast<const ChassisTelemetry*>(
               &_ChassisTelemetry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ChassisTelemetry* other);

  // implements Message ----------------------------------------------

  inline ChassisTelemetry* New() const PROTOBUF_FINAL { return New(NULL); }

  ChassisTelemetry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChassisTelemetry& from);
  void MergeFrom(const ChassisTelemetry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChassisTelemetry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ORION_COMM.WheelTelemetry wheel = 1;
  int wheel_size() const;
  void clear_wheel();
  static const int kWheelFieldNumber = 1;
  const ::ORION_COMM::WheelTelemetry& wheel(int index) const;
  ::ORION_COMM::WheelTelemetry* mutable_wheel(int index);
  ::ORION_COMM::WheelTelemetry* add_wheel();
  ::google::protobuf::RepeatedPtrField< ::ORION_COMM::WheelTelemetry >*
      mutable_wheel();
  const ::google::protobuf::RepeatedPtrField< ::ORION_COMM::WheelTelemetry >&
      wheel() const;

  // @@protoc_insertion_point(class_scope:ORION_COMM.ChassisTelemetry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ORION_COMM::WheelTelemetry > wheel_;
  mutable int _cached_size_;
  friend struct protobuf_roverToEarthBaseComm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Feedback : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ORION_COMM.Feedback) */ {
 public:
  Feedback();
  virtual ~Feedback();

  Feedback(const Feedback& from);

  inline Feedback& operator=(const Feedback& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Feedback& default_instance();

  enum FeedbackContentCase {
    kChassis = 2,
    FEEDBACK_CONTENT_NOT_SET = 0,
  };

  static inline const Feedback* internal_default_instance() {
    return reinterpret_cast<const Feedback*>(
               &_Feedback_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Feedback* other);

  // implements Message ----------------------------------------------

  inline Feedback* New() const PROTOBUF_FINAL { return New(NULL); }

  Feedback* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Feedback& from);
  void MergeFrom(const Feedback& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Feedback* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ORION_COMM.Commands cmd = 1;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::ORION_COMM::Commands cmd() const;
  void set_cmd(::ORION_COMM::Commands value);

  // .ORION_COMM.ChassisTelemetry chassis = 2;
  bool has_chassis() const;
  void clear_chassis();
  static const int kChassisFieldNumber = 2;
  const ::ORION_COMM::ChassisTelemetry& chassis() const;
  ::ORION_COMM::ChassisTelemetry* mutable_chassis();
  ::ORION_COMM::ChassisTelemetry* release_chassis();
  void set_allocated_chassis(::ORION_COMM::ChassisTelemetry* chassis);

  FeedbackContentCase feedback_content_case() const;
  // @@protoc_insertion_point(class_scope:ORION_COMM.Feedback)
 private:
  void set_has_chassis();

  inline bool has_feedback_content() const;
  void clear_feedback_content();
  inline void clear_has_feedback_content();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int cmd_;
  union FeedbackContentUnion {
    FeedbackContentUnion() {}
    ::ORION_COMM::ChassisTelemetry* chassis_;
  } feedback_content_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_roverToEarthBaseComm_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// WheelTelemetry

// int32 ID = 1;
inline void WheelTelemetry::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 WheelTelemetry::id() const {
  // @@protoc_insertion_point(field_get:ORION_COMM.WheelTelemetry.ID)
  return id_;
}
inline void WheelTelemetry::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ORION_COMM.WheelTelemetry.ID)
}

// double angularVelocity = 2;
inline void WheelTelemetry::clear_angularvelocity() {
  angularvelocity_ = 0;
}
inline double WheelTelemetry::angularvelocity() const {
  // @@protoc_insertion_point(field_get:ORION_COMM.WheelTelemetry.angularVelocity)
  return angularvelocity_;
}
inline void WheelTelemetry::set_angularvelocity(double value) {
  
  angularvelocity_ = value;
  // @@protoc_insertion_point(field_set:ORION_COMM.WheelTelemetry.angularVelocity)
}

// double current = 3;
inline void WheelTelemetry::clear_current() {
  current_ = 0;
}
inline double WheelTelemetry::current() const {
  // @@protoc_insertion_point(field_get:ORION_COMM.WheelTelemetry.current)
  return current_;
}
inline void WheelTelemetry::set_current(double value) {
  
  current_ = value;
  // @@protoc_insertion_point(field_set:ORION_COMM.WheelTelemetry.current)
}

// double heatSinkTemperature = 4;
inline void WheelTelemetry::clear_heatsinktemperature() {
  heatsinktemperature_ = 0;
}
inline double WheelTelemetry::heatsinktemperature() const {
  // @@protoc_insertion_point(field_get:ORION_COMM.WheelTelemetry.heatSinkTemperature)
  return heatsinktemperature_;
}
inline void WheelTelemetry::set_heatsinktemperature(double value) {
  
  heatsinktemperature_ = value;
  // @@protoc_insertion_point(field_set:ORION_COMM.WheelTelemetry.heatSinkTemperature)
}

// int32 pwm = 5;
inline void WheelTelemetry::clear_pwm() {
  pwm_ = 0;
}
inline ::google::protobuf::int32 WheelTelemetry::pwm() const {
  // @@protoc_insertion_point(field_get:ORION_COMM.WheelTelemetry.pwm)
  return pwm_;
}
inline void WheelTelemetry::set_pwm(::google::protobuf::int32 value) {
  
  pwm_ = value;
  // @@protoc_insertion_point(field_set:ORION_COMM.WheelTelemetry.pwm)
}

// int32 errorCode = 6;
inline void WheelTelemetry::clear_errorcode() {
  errorcode_ = 0;
}
inline ::google::protobuf::int32 WheelTelemetry::errorcode() const {
  // @@protoc_insertion_point(field_get:ORION_COMM.WheelTelemetry.errorCode)
  return errorcode_;
}
inline void WheelTelemetry::set_errorcode(::google::protobuf::int32 value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:ORION_COMM.WheelTelemetry.errorCode)
}

// -------------------------------------------------------------------

// ChassisTelemetry

// repeated .ORION_COMM.WheelTelemetry wheel = 1;
inline int ChassisTelemetry::wheel_size() const {
  return wheel_.size();
}
inline void ChassisTelemetry::clear_wheel() {
  wheel_.Clear();
}
inline const ::ORION_COMM::WheelTelemetry& ChassisTelemetry::wheel(int index) const {
  // @@protoc_insertion_point(field_get:ORION_COMM.ChassisTelemetry.wheel)
  return wheel_.Get(index);
}
inline ::ORION_COMM::WheelTelemetry* ChassisTelemetry::mutable_wheel(int index) {
  // @@protoc_insertion_point(field_mutable:ORION_COMM.ChassisTelemetry.wheel)
  return wheel_.Mutable(index);
}
inline ::ORION_COMM::WheelTelemetry* ChassisTelemetry::add_wheel() {
  // @@protoc_insertion_point(field_add:ORION_COMM.ChassisTelemetry.wheel)
  return wheel_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ORION_COMM::WheelTelemetry >*
ChassisTelemetry::mutable_wheel() {
  // @@protoc_insertion_point(field_mutable_list:ORION_COMM.ChassisTelemetry.wheel)
  return &wheel_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ORION_COMM::WheelTelemetry >&
ChassisTelemetry::wheel() const {
  // @@protoc_insertion_point(field_list:ORION_COMM.ChassisTelemetry.wheel)
  return wheel_;
}

// -------------------------------------------------------------------

// Feedback

// .ORION_COMM.Commands cmd = 1;
inline void Feedback::clear_cmd() {
  cmd_ = 0;
}
inline ::ORION_COMM::Commands Feedback::cmd() const {
  // @@protoc_insertion_point(field_get:ORION_COMM.Feedback.cmd)
  return static_cast< ::ORION_COMM::Commands >(cmd_);
}
inline void Feedback::set_cmd(::ORION_COMM::Commands value) {
  
  cmd_ = value;
  // @@protoc_insertion_point(field_set:ORION_COMM.Feedback.cmd)
}

// .ORION_COMM.ChassisTelemetry chassis = 2;
inline bool Feedback::has_chassis() const {
  return feedback_content_case() == kChassis;
}
inline void Feedback::set_has_chassis() {
  _oneof_case_[0] = kChassis;
}
inline void Feedback::clear_chassis() {
  if (has_chassis()) {
    delete feedback_content_.chassis_;
    clear_has_feedback_content();
  }
}
inline  const ::ORION_COMM::ChassisTelemetry& Feedback::chassis() const {
  // @@protoc_insertion_point(field_get:ORION_COMM.Feedback.chassis)
  return has_chassis()
      ? *feedback_content_.chassis_
      : ::ORION_COMM::ChassisTelemetry::default_instance();
}
inline ::ORION_COMM::ChassisTelemetry* Feedback::mutable_chassis() {
  if (!has_chassis()) {
    clear_feedback_content();
    set_has_chassis();
    feedback_content_.chassis_ = new ::ORION_COMM::ChassisTelemetry;
  }
  // @@protoc_insertion_point(field_mutable:ORION_COMM.Feedback.chassis)
  return feedback_content_.chassis_;
}
inline ::ORION_COMM::ChassisTelemetry* Feedback::release_chassis() {
  // @@protoc_insertion_point(field_release:ORION_COMM.Feedback.chassis)
  if (has_chassis()) {
    clear_has_feedback_content();
    ::ORION_COMM::ChassisTelemetry* temp = feedback_content_.chassis_;
    feedback_content_.chassis_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Feedback::set_allocated_chassis(::ORION_COMM::ChassisTelemetry* chassis) {
  clear_feedback_content();
  if (chassis) {
    set_has_chassis();
    feedback_content_.chassis_ = chassis;
  }
  // @@protoc_insertion_point(field_set_allocated:ORION_COMM.Feedback.chassis)
}

inline bool Feedback::has_feedback_content() const {
  return feedback_content_case() != FEEDBACK_CONTENT_NOT_SET;
}
inline void Feedback::clear_has_feedback_content() {
  _oneof_case_[0] = FEEDBACK_CONTENT_NOT_SET;
}
inline Feedback::FeedbackContentCase Feedback::feedback_content_case() const {
  return Feedback::FeedbackContentCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace ORION_COMM

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_roverToEarthBaseComm_2eproto__INCLUDED
