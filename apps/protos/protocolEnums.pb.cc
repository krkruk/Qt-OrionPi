// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocolEnums.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocolEnums.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ORION_COMM {

namespace protobuf_protocolEnums_2eproto {


namespace {

const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = { ~0u };
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;
namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "protocolEnums.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      NULL, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void TableStruct::Shutdown() {
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\023protocolEnums.proto\022\nORION_COMM*G\n\010CMD"
      "_TYPE\022\r\n\tUNDEFINED\020\000\022\n\n\006CREATE\020\001\022\010\n\004READ"
      "\020\002\022\n\n\006UPDATE\020\003\022\n\n\006DELETE\020\004*\\\n\006MODULE\022\r\n\t"
      "NO_MODULE\020\000\022\t\n\005DRIVE\020\001\022\017\n\013MANIPULATOR\020\002\022"
      "\027\n\023HARDWARE_CTRL_PANEL\020\003\022\016\n\nLAB_MODULE\020\004"
      "*F\n\004MODE\022\013\n\007NO_MODE\020\000\022\023\n\017USER_CONTROLLED"
      "\020\001\022\014\n\010SCRIPTED\020\002\022\016\n\nAUTONOMOUS\020\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 280);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocolEnums.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_protocolEnums_2eproto

const ::google::protobuf::EnumDescriptor* CMD_TYPE_descriptor() {
  protobuf_protocolEnums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocolEnums_2eproto::file_level_enum_descriptors[0];
}
bool CMD_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MODULE_descriptor() {
  protobuf_protocolEnums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocolEnums_2eproto::file_level_enum_descriptors[1];
}
bool MODULE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MODE_descriptor() {
  protobuf_protocolEnums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocolEnums_2eproto::file_level_enum_descriptors[2];
}
bool MODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ORION_COMM

// @@protoc_insertion_point(global_scope)
