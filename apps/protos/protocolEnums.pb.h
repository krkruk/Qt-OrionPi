// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocolEnums.proto

#ifndef PROTOBUF_protocolEnums_2eproto__INCLUDED
#define PROTOBUF_protocolEnums_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
namespace ORION_COMM {
}  // namespace ORION_COMM

namespace ORION_COMM {

namespace protobuf_protocolEnums_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_protocolEnums_2eproto

enum CMD_TYPE {
  UNDEFINED = 0,
  CREATE = 1,
  READ = 2,
  UPDATE = 3,
  DELETE = 4,
  CMD_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CMD_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CMD_TYPE_IsValid(int value);
const CMD_TYPE CMD_TYPE_MIN = UNDEFINED;
const CMD_TYPE CMD_TYPE_MAX = DELETE;
const int CMD_TYPE_ARRAYSIZE = CMD_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMD_TYPE_descriptor();
inline const ::std::string& CMD_TYPE_Name(CMD_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMD_TYPE_descriptor(), value);
}
inline bool CMD_TYPE_Parse(
    const ::std::string& name, CMD_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMD_TYPE>(
    CMD_TYPE_descriptor(), name, value);
}
enum MODULE {
  NO_MODULE = 0,
  DRIVE = 1,
  MANIPULATOR = 2,
  HARDWARE_CTRL_PANEL = 3,
  LAB_MODULE = 4,
  MODULE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MODULE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MODULE_IsValid(int value);
const MODULE MODULE_MIN = NO_MODULE;
const MODULE MODULE_MAX = LAB_MODULE;
const int MODULE_ARRAYSIZE = MODULE_MAX + 1;

const ::google::protobuf::EnumDescriptor* MODULE_descriptor();
inline const ::std::string& MODULE_Name(MODULE value) {
  return ::google::protobuf::internal::NameOfEnum(
    MODULE_descriptor(), value);
}
inline bool MODULE_Parse(
    const ::std::string& name, MODULE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MODULE>(
    MODULE_descriptor(), name, value);
}
enum MODE {
  NO_MODE = 0,
  USER_CONTROLLED = 1,
  SCRIPTED = 2,
  AUTONOMOUS = 3,
  MODE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MODE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MODE_IsValid(int value);
const MODE MODE_MIN = NO_MODE;
const MODE MODE_MAX = AUTONOMOUS;
const int MODE_ARRAYSIZE = MODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* MODE_descriptor();
inline const ::std::string& MODE_Name(MODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    MODE_descriptor(), value);
}
inline bool MODE_Parse(
    const ::std::string& name, MODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MODE>(
    MODE_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace ORION_COMM

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ORION_COMM::CMD_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ORION_COMM::CMD_TYPE>() {
  return ::ORION_COMM::CMD_TYPE_descriptor();
}
template <> struct is_proto_enum< ::ORION_COMM::MODULE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ORION_COMM::MODULE>() {
  return ::ORION_COMM::MODULE_descriptor();
}
template <> struct is_proto_enum< ::ORION_COMM::MODE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ORION_COMM::MODE>() {
  return ::ORION_COMM::MODE_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protocolEnums_2eproto__INCLUDED
