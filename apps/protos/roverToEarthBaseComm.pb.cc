// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: roverToEarthBaseComm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "roverToEarthBaseComm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ORION_COMM {
class WheelTelemetryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WheelTelemetry> {
} _WheelTelemetry_default_instance_;
class ChassisTelemetryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChassisTelemetry> {
} _ChassisTelemetry_default_instance_;
class FeedbackDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Feedback> {
  public:
  const ::ORION_COMM::ChassisTelemetry* chassis_;
} _Feedback_default_instance_;

namespace protobuf_roverToEarthBaseComm_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelTelemetry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelTelemetry, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelTelemetry, angularvelocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelTelemetry, current_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelTelemetry, heatsinktemperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelTelemetry, pwm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelTelemetry, errorcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisTelemetry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisTelemetry, wheel_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feedback, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feedback, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feedback, cmd_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Feedback_default_instance_), chassis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feedback, feedback_content_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(WheelTelemetry)},
  { 11, -1, sizeof(ChassisTelemetry)},
  { 17, -1, sizeof(Feedback)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_WheelTelemetry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChassisTelemetry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Feedback_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "roverToEarthBaseComm.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _WheelTelemetry_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ChassisTelemetry_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Feedback_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::ORION_COMM::protobuf_earthBaseToRoverComm_2eproto::InitDefaults();
  _WheelTelemetry_default_instance_.DefaultConstruct();
  _ChassisTelemetry_default_instance_.DefaultConstruct();
  _Feedback_default_instance_.DefaultConstruct();
  _Feedback_default_instance_.chassis_ = const_cast< ::ORION_COMM::ChassisTelemetry*>(
      ::ORION_COMM::ChassisTelemetry::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\032roverToEarthBaseComm.proto\022\nORION_COMM"
      "\032\032earthBaseToRoverComm.proto\"\203\001\n\016WheelTe"
      "lemetry\022\n\n\002ID\030\001 \001(\005\022\027\n\017angularVelocity\030\002"
      " \001(\001\022\017\n\007current\030\003 \001(\001\022\033\n\023heatSinkTempera"
      "ture\030\004 \001(\001\022\013\n\003pwm\030\005 \001(\005\022\021\n\terrorCode\030\006 \001"
      "(\005\"=\n\020ChassisTelemetry\022)\n\005wheel\030\001 \003(\0132\032."
      "ORION_COMM.WheelTelemetry\"r\n\010Feedback\022!\n"
      "\003cmd\030\001 \001(\0162\024.ORION_COMM.Commands\022/\n\007chas"
      "sis\030\002 \001(\0132\034.ORION_COMM.ChassisTelemetryH"
      "\000B\022\n\020feedback_contentb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 389);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "roverToEarthBaseComm.proto", &protobuf_RegisterTypes);
  ::ORION_COMM::protobuf_earthBaseToRoverComm_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_roverToEarthBaseComm_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WheelTelemetry::kIDFieldNumber;
const int WheelTelemetry::kAngularVelocityFieldNumber;
const int WheelTelemetry::kCurrentFieldNumber;
const int WheelTelemetry::kHeatSinkTemperatureFieldNumber;
const int WheelTelemetry::kPwmFieldNumber;
const int WheelTelemetry::kErrorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WheelTelemetry::WheelTelemetry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_roverToEarthBaseComm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ORION_COMM.WheelTelemetry)
}
WheelTelemetry::WheelTelemetry(const WheelTelemetry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&angularvelocity_, &from.angularvelocity_,
    reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&angularvelocity_) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:ORION_COMM.WheelTelemetry)
}

void WheelTelemetry::SharedCtor() {
  ::memset(&angularvelocity_, 0, reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&angularvelocity_) + sizeof(errorcode_));
  _cached_size_ = 0;
}

WheelTelemetry::~WheelTelemetry() {
  // @@protoc_insertion_point(destructor:ORION_COMM.WheelTelemetry)
  SharedDtor();
}

void WheelTelemetry::SharedDtor() {
}

void WheelTelemetry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WheelTelemetry::descriptor() {
  protobuf_roverToEarthBaseComm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_roverToEarthBaseComm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WheelTelemetry& WheelTelemetry::default_instance() {
  protobuf_roverToEarthBaseComm_2eproto::InitDefaults();
  return *internal_default_instance();
}

WheelTelemetry* WheelTelemetry::New(::google::protobuf::Arena* arena) const {
  WheelTelemetry* n = new WheelTelemetry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WheelTelemetry::Clear() {
// @@protoc_insertion_point(message_clear_start:ORION_COMM.WheelTelemetry)
  ::memset(&angularvelocity_, 0, reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&angularvelocity_) + sizeof(errorcode_));
}

bool WheelTelemetry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ORION_COMM.WheelTelemetry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double angularVelocity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angularvelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double current = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double heatSinkTemperature = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heatsinktemperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pwm = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pwm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 errorCode = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ORION_COMM.WheelTelemetry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ORION_COMM.WheelTelemetry)
  return false;
#undef DO_
}

void WheelTelemetry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ORION_COMM.WheelTelemetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // double angularVelocity = 2;
  if (this->angularvelocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->angularvelocity(), output);
  }

  // double current = 3;
  if (this->current() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->current(), output);
  }

  // double heatSinkTemperature = 4;
  if (this->heatsinktemperature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->heatsinktemperature(), output);
  }

  // int32 pwm = 5;
  if (this->pwm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pwm(), output);
  }

  // int32 errorCode = 6;
  if (this->errorcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->errorcode(), output);
  }

  // @@protoc_insertion_point(serialize_end:ORION_COMM.WheelTelemetry)
}

::google::protobuf::uint8* WheelTelemetry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ORION_COMM.WheelTelemetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // double angularVelocity = 2;
  if (this->angularvelocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->angularvelocity(), target);
  }

  // double current = 3;
  if (this->current() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->current(), target);
  }

  // double heatSinkTemperature = 4;
  if (this->heatsinktemperature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->heatsinktemperature(), target);
  }

  // int32 pwm = 5;
  if (this->pwm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pwm(), target);
  }

  // int32 errorCode = 6;
  if (this->errorcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->errorcode(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ORION_COMM.WheelTelemetry)
  return target;
}

size_t WheelTelemetry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ORION_COMM.WheelTelemetry)
  size_t total_size = 0;

  // double angularVelocity = 2;
  if (this->angularvelocity() != 0) {
    total_size += 1 + 8;
  }

  // double current = 3;
  if (this->current() != 0) {
    total_size += 1 + 8;
  }

  // int32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 pwm = 5;
  if (this->pwm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pwm());
  }

  // double heatSinkTemperature = 4;
  if (this->heatsinktemperature() != 0) {
    total_size += 1 + 8;
  }

  // int32 errorCode = 6;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errorcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WheelTelemetry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ORION_COMM.WheelTelemetry)
  GOOGLE_DCHECK_NE(&from, this);
  const WheelTelemetry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WheelTelemetry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ORION_COMM.WheelTelemetry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ORION_COMM.WheelTelemetry)
    MergeFrom(*source);
  }
}

void WheelTelemetry::MergeFrom(const WheelTelemetry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ORION_COMM.WheelTelemetry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.angularvelocity() != 0) {
    set_angularvelocity(from.angularvelocity());
  }
  if (from.current() != 0) {
    set_current(from.current());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.pwm() != 0) {
    set_pwm(from.pwm());
  }
  if (from.heatsinktemperature() != 0) {
    set_heatsinktemperature(from.heatsinktemperature());
  }
  if (from.errorcode() != 0) {
    set_errorcode(from.errorcode());
  }
}

void WheelTelemetry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ORION_COMM.WheelTelemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WheelTelemetry::CopyFrom(const WheelTelemetry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ORION_COMM.WheelTelemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WheelTelemetry::IsInitialized() const {
  return true;
}

void WheelTelemetry::Swap(WheelTelemetry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WheelTelemetry::InternalSwap(WheelTelemetry* other) {
  std::swap(angularvelocity_, other->angularvelocity_);
  std::swap(current_, other->current_);
  std::swap(id_, other->id_);
  std::swap(pwm_, other->pwm_);
  std::swap(heatsinktemperature_, other->heatsinktemperature_);
  std::swap(errorcode_, other->errorcode_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WheelTelemetry::GetMetadata() const {
  protobuf_roverToEarthBaseComm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_roverToEarthBaseComm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WheelTelemetry

// int32 ID = 1;
void WheelTelemetry::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 WheelTelemetry::id() const {
  // @@protoc_insertion_point(field_get:ORION_COMM.WheelTelemetry.ID)
  return id_;
}
void WheelTelemetry::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:ORION_COMM.WheelTelemetry.ID)
}

// double angularVelocity = 2;
void WheelTelemetry::clear_angularvelocity() {
  angularvelocity_ = 0;
}
double WheelTelemetry::angularvelocity() const {
  // @@protoc_insertion_point(field_get:ORION_COMM.WheelTelemetry.angularVelocity)
  return angularvelocity_;
}
void WheelTelemetry::set_angularvelocity(double value) {
  
  angularvelocity_ = value;
  // @@protoc_insertion_point(field_set:ORION_COMM.WheelTelemetry.angularVelocity)
}

// double current = 3;
void WheelTelemetry::clear_current() {
  current_ = 0;
}
double WheelTelemetry::current() const {
  // @@protoc_insertion_point(field_get:ORION_COMM.WheelTelemetry.current)
  return current_;
}
void WheelTelemetry::set_current(double value) {
  
  current_ = value;
  // @@protoc_insertion_point(field_set:ORION_COMM.WheelTelemetry.current)
}

// double heatSinkTemperature = 4;
void WheelTelemetry::clear_heatsinktemperature() {
  heatsinktemperature_ = 0;
}
double WheelTelemetry::heatsinktemperature() const {
  // @@protoc_insertion_point(field_get:ORION_COMM.WheelTelemetry.heatSinkTemperature)
  return heatsinktemperature_;
}
void WheelTelemetry::set_heatsinktemperature(double value) {
  
  heatsinktemperature_ = value;
  // @@protoc_insertion_point(field_set:ORION_COMM.WheelTelemetry.heatSinkTemperature)
}

// int32 pwm = 5;
void WheelTelemetry::clear_pwm() {
  pwm_ = 0;
}
::google::protobuf::int32 WheelTelemetry::pwm() const {
  // @@protoc_insertion_point(field_get:ORION_COMM.WheelTelemetry.pwm)
  return pwm_;
}
void WheelTelemetry::set_pwm(::google::protobuf::int32 value) {
  
  pwm_ = value;
  // @@protoc_insertion_point(field_set:ORION_COMM.WheelTelemetry.pwm)
}

// int32 errorCode = 6;
void WheelTelemetry::clear_errorcode() {
  errorcode_ = 0;
}
::google::protobuf::int32 WheelTelemetry::errorcode() const {
  // @@protoc_insertion_point(field_get:ORION_COMM.WheelTelemetry.errorCode)
  return errorcode_;
}
void WheelTelemetry::set_errorcode(::google::protobuf::int32 value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:ORION_COMM.WheelTelemetry.errorCode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChassisTelemetry::kWheelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChassisTelemetry::ChassisTelemetry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_roverToEarthBaseComm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ORION_COMM.ChassisTelemetry)
}
ChassisTelemetry::ChassisTelemetry(const ChassisTelemetry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      wheel_(from.wheel_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ORION_COMM.ChassisTelemetry)
}

void ChassisTelemetry::SharedCtor() {
  _cached_size_ = 0;
}

ChassisTelemetry::~ChassisTelemetry() {
  // @@protoc_insertion_point(destructor:ORION_COMM.ChassisTelemetry)
  SharedDtor();
}

void ChassisTelemetry::SharedDtor() {
}

void ChassisTelemetry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChassisTelemetry::descriptor() {
  protobuf_roverToEarthBaseComm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_roverToEarthBaseComm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChassisTelemetry& ChassisTelemetry::default_instance() {
  protobuf_roverToEarthBaseComm_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChassisTelemetry* ChassisTelemetry::New(::google::protobuf::Arena* arena) const {
  ChassisTelemetry* n = new ChassisTelemetry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChassisTelemetry::Clear() {
// @@protoc_insertion_point(message_clear_start:ORION_COMM.ChassisTelemetry)
  wheel_.Clear();
}

bool ChassisTelemetry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ORION_COMM.ChassisTelemetry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ORION_COMM.WheelTelemetry wheel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wheel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ORION_COMM.ChassisTelemetry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ORION_COMM.ChassisTelemetry)
  return false;
#undef DO_
}

void ChassisTelemetry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ORION_COMM.ChassisTelemetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ORION_COMM.WheelTelemetry wheel = 1;
  for (unsigned int i = 0, n = this->wheel_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->wheel(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ORION_COMM.ChassisTelemetry)
}

::google::protobuf::uint8* ChassisTelemetry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ORION_COMM.ChassisTelemetry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ORION_COMM.WheelTelemetry wheel = 1;
  for (unsigned int i = 0, n = this->wheel_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->wheel(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ORION_COMM.ChassisTelemetry)
  return target;
}

size_t ChassisTelemetry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ORION_COMM.ChassisTelemetry)
  size_t total_size = 0;

  // repeated .ORION_COMM.WheelTelemetry wheel = 1;
  {
    unsigned int count = this->wheel_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wheel(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChassisTelemetry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ORION_COMM.ChassisTelemetry)
  GOOGLE_DCHECK_NE(&from, this);
  const ChassisTelemetry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChassisTelemetry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ORION_COMM.ChassisTelemetry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ORION_COMM.ChassisTelemetry)
    MergeFrom(*source);
  }
}

void ChassisTelemetry::MergeFrom(const ChassisTelemetry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ORION_COMM.ChassisTelemetry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wheel_.MergeFrom(from.wheel_);
}

void ChassisTelemetry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ORION_COMM.ChassisTelemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChassisTelemetry::CopyFrom(const ChassisTelemetry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ORION_COMM.ChassisTelemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChassisTelemetry::IsInitialized() const {
  return true;
}

void ChassisTelemetry::Swap(ChassisTelemetry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChassisTelemetry::InternalSwap(ChassisTelemetry* other) {
  wheel_.InternalSwap(&other->wheel_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChassisTelemetry::GetMetadata() const {
  protobuf_roverToEarthBaseComm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_roverToEarthBaseComm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChassisTelemetry

// repeated .ORION_COMM.WheelTelemetry wheel = 1;
int ChassisTelemetry::wheel_size() const {
  return wheel_.size();
}
void ChassisTelemetry::clear_wheel() {
  wheel_.Clear();
}
const ::ORION_COMM::WheelTelemetry& ChassisTelemetry::wheel(int index) const {
  // @@protoc_insertion_point(field_get:ORION_COMM.ChassisTelemetry.wheel)
  return wheel_.Get(index);
}
::ORION_COMM::WheelTelemetry* ChassisTelemetry::mutable_wheel(int index) {
  // @@protoc_insertion_point(field_mutable:ORION_COMM.ChassisTelemetry.wheel)
  return wheel_.Mutable(index);
}
::ORION_COMM::WheelTelemetry* ChassisTelemetry::add_wheel() {
  // @@protoc_insertion_point(field_add:ORION_COMM.ChassisTelemetry.wheel)
  return wheel_.Add();
}
::google::protobuf::RepeatedPtrField< ::ORION_COMM::WheelTelemetry >*
ChassisTelemetry::mutable_wheel() {
  // @@protoc_insertion_point(field_mutable_list:ORION_COMM.ChassisTelemetry.wheel)
  return &wheel_;
}
const ::google::protobuf::RepeatedPtrField< ::ORION_COMM::WheelTelemetry >&
ChassisTelemetry::wheel() const {
  // @@protoc_insertion_point(field_list:ORION_COMM.ChassisTelemetry.wheel)
  return wheel_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Feedback::kCmdFieldNumber;
const int Feedback::kChassisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Feedback::Feedback()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_roverToEarthBaseComm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ORION_COMM.Feedback)
}
Feedback::Feedback(const Feedback& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmd_ = from.cmd_;
  clear_has_feedback_content();
  switch (from.feedback_content_case()) {
    case kChassis: {
      mutable_chassis()->::ORION_COMM::ChassisTelemetry::MergeFrom(from.chassis());
      break;
    }
    case FEEDBACK_CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ORION_COMM.Feedback)
}

void Feedback::SharedCtor() {
  cmd_ = 0;
  clear_has_feedback_content();
  _cached_size_ = 0;
}

Feedback::~Feedback() {
  // @@protoc_insertion_point(destructor:ORION_COMM.Feedback)
  SharedDtor();
}

void Feedback::SharedDtor() {
  if (has_feedback_content()) {
    clear_feedback_content();
  }
}

void Feedback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Feedback::descriptor() {
  protobuf_roverToEarthBaseComm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_roverToEarthBaseComm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Feedback& Feedback::default_instance() {
  protobuf_roverToEarthBaseComm_2eproto::InitDefaults();
  return *internal_default_instance();
}

Feedback* Feedback::New(::google::protobuf::Arena* arena) const {
  Feedback* n = new Feedback;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Feedback::clear_feedback_content() {
// @@protoc_insertion_point(one_of_clear_start:ORION_COMM.Feedback)
  switch (feedback_content_case()) {
    case kChassis: {
      delete feedback_content_.chassis_;
      break;
    }
    case FEEDBACK_CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FEEDBACK_CONTENT_NOT_SET;
}


void Feedback::Clear() {
// @@protoc_insertion_point(message_clear_start:ORION_COMM.Feedback)
  cmd_ = 0;
  clear_feedback_content();
}

bool Feedback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ORION_COMM.Feedback)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ORION_COMM.Commands cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd(static_cast< ::ORION_COMM::Commands >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ORION_COMM.ChassisTelemetry chassis = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chassis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ORION_COMM.Feedback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ORION_COMM.Feedback)
  return false;
#undef DO_
}

void Feedback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ORION_COMM.Feedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ORION_COMM.Commands cmd = 1;
  if (this->cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // .ORION_COMM.ChassisTelemetry chassis = 2;
  if (has_chassis()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *feedback_content_.chassis_, output);
  }

  // @@protoc_insertion_point(serialize_end:ORION_COMM.Feedback)
}

::google::protobuf::uint8* Feedback::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ORION_COMM.Feedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ORION_COMM.Commands cmd = 1;
  if (this->cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // .ORION_COMM.ChassisTelemetry chassis = 2;
  if (has_chassis()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *feedback_content_.chassis_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ORION_COMM.Feedback)
  return target;
}

size_t Feedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ORION_COMM.Feedback)
  size_t total_size = 0;

  // .ORION_COMM.Commands cmd = 1;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }

  switch (feedback_content_case()) {
    // .ORION_COMM.ChassisTelemetry chassis = 2;
    case kChassis: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *feedback_content_.chassis_);
      break;
    }
    case FEEDBACK_CONTENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Feedback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ORION_COMM.Feedback)
  GOOGLE_DCHECK_NE(&from, this);
  const Feedback* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Feedback>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ORION_COMM.Feedback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ORION_COMM.Feedback)
    MergeFrom(*source);
  }
}

void Feedback::MergeFrom(const Feedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ORION_COMM.Feedback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cmd() != 0) {
    set_cmd(from.cmd());
  }
  switch (from.feedback_content_case()) {
    case kChassis: {
      mutable_chassis()->::ORION_COMM::ChassisTelemetry::MergeFrom(from.chassis());
      break;
    }
    case FEEDBACK_CONTENT_NOT_SET: {
      break;
    }
  }
}

void Feedback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ORION_COMM.Feedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Feedback::CopyFrom(const Feedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ORION_COMM.Feedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feedback::IsInitialized() const {
  return true;
}

void Feedback::Swap(Feedback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Feedback::InternalSwap(Feedback* other) {
  std::swap(cmd_, other->cmd_);
  std::swap(feedback_content_, other->feedback_content_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Feedback::GetMetadata() const {
  protobuf_roverToEarthBaseComm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_roverToEarthBaseComm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Feedback

// .ORION_COMM.Commands cmd = 1;
void Feedback::clear_cmd() {
  cmd_ = 0;
}
::ORION_COMM::Commands Feedback::cmd() const {
  // @@protoc_insertion_point(field_get:ORION_COMM.Feedback.cmd)
  return static_cast< ::ORION_COMM::Commands >(cmd_);
}
void Feedback::set_cmd(::ORION_COMM::Commands value) {
  
  cmd_ = value;
  // @@protoc_insertion_point(field_set:ORION_COMM.Feedback.cmd)
}

// .ORION_COMM.ChassisTelemetry chassis = 2;
bool Feedback::has_chassis() const {
  return feedback_content_case() == kChassis;
}
void Feedback::set_has_chassis() {
  _oneof_case_[0] = kChassis;
}
void Feedback::clear_chassis() {
  if (has_chassis()) {
    delete feedback_content_.chassis_;
    clear_has_feedback_content();
  }
}
 const ::ORION_COMM::ChassisTelemetry& Feedback::chassis() const {
  // @@protoc_insertion_point(field_get:ORION_COMM.Feedback.chassis)
  return has_chassis()
      ? *feedback_content_.chassis_
      : ::ORION_COMM::ChassisTelemetry::default_instance();
}
::ORION_COMM::ChassisTelemetry* Feedback::mutable_chassis() {
  if (!has_chassis()) {
    clear_feedback_content();
    set_has_chassis();
    feedback_content_.chassis_ = new ::ORION_COMM::ChassisTelemetry;
  }
  // @@protoc_insertion_point(field_mutable:ORION_COMM.Feedback.chassis)
  return feedback_content_.chassis_;
}
::ORION_COMM::ChassisTelemetry* Feedback::release_chassis() {
  // @@protoc_insertion_point(field_release:ORION_COMM.Feedback.chassis)
  if (has_chassis()) {
    clear_has_feedback_content();
    ::ORION_COMM::ChassisTelemetry* temp = feedback_content_.chassis_;
    feedback_content_.chassis_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Feedback::set_allocated_chassis(::ORION_COMM::ChassisTelemetry* chassis) {
  clear_feedback_content();
  if (chassis) {
    set_has_chassis();
    feedback_content_.chassis_ = chassis;
  }
  // @@protoc_insertion_point(field_set_allocated:ORION_COMM.Feedback.chassis)
}

bool Feedback::has_feedback_content() const {
  return feedback_content_case() != FEEDBACK_CONTENT_NOT_SET;
}
void Feedback::clear_has_feedback_content() {
  _oneof_case_[0] = FEEDBACK_CONTENT_NOT_SET;
}
Feedback::FeedbackContentCase Feedback::feedback_content_case() const {
  return Feedback::FeedbackContentCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ORION_COMM

// @@protoc_insertion_point(global_scope)
