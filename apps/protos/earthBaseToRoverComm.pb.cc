// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: earthBaseToRoverComm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "earthBaseToRoverComm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ORION_COMM {
class ChassisDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Chassis> {
} _Chassis_default_instance_;
class CommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Command> {
  public:
  const ::ORION_COMM::Chassis* drive_;
} _Command_default_instance_;

namespace protobuf_earthBaseToRoverComm_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, leftrowangularvelocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, rightrowangularvelocity_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, cmdtype_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Command_default_instance_), drive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, cmd_msgs_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Chassis)},
  { 7, -1, sizeof(Command)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Chassis_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Command_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "earthBaseToRoverComm.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _Chassis_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Command_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Chassis_default_instance_.DefaultConstruct();
  _Command_default_instance_.DefaultConstruct();
  _Command_default_instance_.drive_ = const_cast< ::ORION_COMM::Chassis*>(
      ::ORION_COMM::Chassis::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\032earthBaseToRoverComm.proto\022\nORION_COMM"
      "\"J\n\007Chassis\022\036\n\026leftRowAngularVelocity\030\001 "
      "\001(\005\022\037\n\027rightRowAngularVelocity\030\002 \001(\005\"b\n\007"
      "Command\022%\n\007cmdType\030\001 \001(\0162\024.ORION_COMM.Co"
      "mmands\022$\n\005drive\030\002 \001(\0132\023.ORION_COMM.Chass"
      "isH\000B\n\n\010cmd_msgs*$\n\010Commands\022\r\n\tUndefine"
      "d\020\000\022\t\n\005Drive\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 262);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "earthBaseToRoverComm.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_earthBaseToRoverComm_2eproto

const ::google::protobuf::EnumDescriptor* Commands_descriptor() {
  protobuf_earthBaseToRoverComm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_earthBaseToRoverComm_2eproto::file_level_enum_descriptors[0];
}
bool Commands_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Chassis::kLeftRowAngularVelocityFieldNumber;
const int Chassis::kRightRowAngularVelocityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Chassis::Chassis()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_earthBaseToRoverComm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ORION_COMM.Chassis)
}
Chassis::Chassis(const Chassis& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&leftrowangularvelocity_, &from.leftrowangularvelocity_,
    reinterpret_cast<char*>(&rightrowangularvelocity_) -
    reinterpret_cast<char*>(&leftrowangularvelocity_) + sizeof(rightrowangularvelocity_));
  // @@protoc_insertion_point(copy_constructor:ORION_COMM.Chassis)
}

void Chassis::SharedCtor() {
  ::memset(&leftrowangularvelocity_, 0, reinterpret_cast<char*>(&rightrowangularvelocity_) -
    reinterpret_cast<char*>(&leftrowangularvelocity_) + sizeof(rightrowangularvelocity_));
  _cached_size_ = 0;
}

Chassis::~Chassis() {
  // @@protoc_insertion_point(destructor:ORION_COMM.Chassis)
  SharedDtor();
}

void Chassis::SharedDtor() {
}

void Chassis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Chassis::descriptor() {
  protobuf_earthBaseToRoverComm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_earthBaseToRoverComm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Chassis& Chassis::default_instance() {
  protobuf_earthBaseToRoverComm_2eproto::InitDefaults();
  return *internal_default_instance();
}

Chassis* Chassis::New(::google::protobuf::Arena* arena) const {
  Chassis* n = new Chassis;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Chassis::Clear() {
// @@protoc_insertion_point(message_clear_start:ORION_COMM.Chassis)
  ::memset(&leftrowangularvelocity_, 0, reinterpret_cast<char*>(&rightrowangularvelocity_) -
    reinterpret_cast<char*>(&leftrowangularvelocity_) + sizeof(rightrowangularvelocity_));
}

bool Chassis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ORION_COMM.Chassis)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 leftRowAngularVelocity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftrowangularvelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rightRowAngularVelocity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rightrowangularvelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ORION_COMM.Chassis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ORION_COMM.Chassis)
  return false;
#undef DO_
}

void Chassis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ORION_COMM.Chassis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 leftRowAngularVelocity = 1;
  if (this->leftrowangularvelocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->leftrowangularvelocity(), output);
  }

  // int32 rightRowAngularVelocity = 2;
  if (this->rightrowangularvelocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rightrowangularvelocity(), output);
  }

  // @@protoc_insertion_point(serialize_end:ORION_COMM.Chassis)
}

::google::protobuf::uint8* Chassis::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ORION_COMM.Chassis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 leftRowAngularVelocity = 1;
  if (this->leftrowangularvelocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->leftrowangularvelocity(), target);
  }

  // int32 rightRowAngularVelocity = 2;
  if (this->rightrowangularvelocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rightrowangularvelocity(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ORION_COMM.Chassis)
  return target;
}

size_t Chassis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ORION_COMM.Chassis)
  size_t total_size = 0;

  // int32 leftRowAngularVelocity = 1;
  if (this->leftrowangularvelocity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leftrowangularvelocity());
  }

  // int32 rightRowAngularVelocity = 2;
  if (this->rightrowangularvelocity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rightrowangularvelocity());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Chassis::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ORION_COMM.Chassis)
  GOOGLE_DCHECK_NE(&from, this);
  const Chassis* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Chassis>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ORION_COMM.Chassis)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ORION_COMM.Chassis)
    MergeFrom(*source);
  }
}

void Chassis::MergeFrom(const Chassis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ORION_COMM.Chassis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.leftrowangularvelocity() != 0) {
    set_leftrowangularvelocity(from.leftrowangularvelocity());
  }
  if (from.rightrowangularvelocity() != 0) {
    set_rightrowangularvelocity(from.rightrowangularvelocity());
  }
}

void Chassis::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ORION_COMM.Chassis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chassis::CopyFrom(const Chassis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ORION_COMM.Chassis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chassis::IsInitialized() const {
  return true;
}

void Chassis::Swap(Chassis* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Chassis::InternalSwap(Chassis* other) {
  std::swap(leftrowangularvelocity_, other->leftrowangularvelocity_);
  std::swap(rightrowangularvelocity_, other->rightrowangularvelocity_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Chassis::GetMetadata() const {
  protobuf_earthBaseToRoverComm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_earthBaseToRoverComm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Chassis

// int32 leftRowAngularVelocity = 1;
void Chassis::clear_leftrowangularvelocity() {
  leftrowangularvelocity_ = 0;
}
::google::protobuf::int32 Chassis::leftrowangularvelocity() const {
  // @@protoc_insertion_point(field_get:ORION_COMM.Chassis.leftRowAngularVelocity)
  return leftrowangularvelocity_;
}
void Chassis::set_leftrowangularvelocity(::google::protobuf::int32 value) {
  
  leftrowangularvelocity_ = value;
  // @@protoc_insertion_point(field_set:ORION_COMM.Chassis.leftRowAngularVelocity)
}

// int32 rightRowAngularVelocity = 2;
void Chassis::clear_rightrowangularvelocity() {
  rightrowangularvelocity_ = 0;
}
::google::protobuf::int32 Chassis::rightrowangularvelocity() const {
  // @@protoc_insertion_point(field_get:ORION_COMM.Chassis.rightRowAngularVelocity)
  return rightrowangularvelocity_;
}
void Chassis::set_rightrowangularvelocity(::google::protobuf::int32 value) {
  
  rightrowangularvelocity_ = value;
  // @@protoc_insertion_point(field_set:ORION_COMM.Chassis.rightRowAngularVelocity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Command::kCmdTypeFieldNumber;
const int Command::kDriveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Command::Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_earthBaseToRoverComm_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ORION_COMM.Command)
}
Command::Command(const Command& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmdtype_ = from.cmdtype_;
  clear_has_cmd_msgs();
  switch (from.cmd_msgs_case()) {
    case kDrive: {
      mutable_drive()->::ORION_COMM::Chassis::MergeFrom(from.drive());
      break;
    }
    case CMD_MSGS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ORION_COMM.Command)
}

void Command::SharedCtor() {
  cmdtype_ = 0;
  clear_has_cmd_msgs();
  _cached_size_ = 0;
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:ORION_COMM.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  if (has_cmd_msgs()) {
    clear_cmd_msgs();
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_earthBaseToRoverComm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_earthBaseToRoverComm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Command& Command::default_instance() {
  protobuf_earthBaseToRoverComm_2eproto::InitDefaults();
  return *internal_default_instance();
}

Command* Command::New(::google::protobuf::Arena* arena) const {
  Command* n = new Command;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Command::clear_cmd_msgs() {
// @@protoc_insertion_point(one_of_clear_start:ORION_COMM.Command)
  switch (cmd_msgs_case()) {
    case kDrive: {
      delete cmd_msgs_.drive_;
      break;
    }
    case CMD_MSGS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CMD_MSGS_NOT_SET;
}


void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:ORION_COMM.Command)
  cmdtype_ = 0;
  clear_cmd_msgs();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ORION_COMM.Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ORION_COMM.Commands cmdType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmdtype(static_cast< ::ORION_COMM::Commands >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ORION_COMM.Chassis drive = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ORION_COMM.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ORION_COMM.Command)
  return false;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ORION_COMM.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ORION_COMM.Commands cmdType = 1;
  if (this->cmdtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmdtype(), output);
  }

  // .ORION_COMM.Chassis drive = 2;
  if (has_drive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *cmd_msgs_.drive_, output);
  }

  // @@protoc_insertion_point(serialize_end:ORION_COMM.Command)
}

::google::protobuf::uint8* Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ORION_COMM.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ORION_COMM.Commands cmdType = 1;
  if (this->cmdtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmdtype(), target);
  }

  // .ORION_COMM.Chassis drive = 2;
  if (has_drive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *cmd_msgs_.drive_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ORION_COMM.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ORION_COMM.Command)
  size_t total_size = 0;

  // .ORION_COMM.Commands cmdType = 1;
  if (this->cmdtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmdtype());
  }

  switch (cmd_msgs_case()) {
    // .ORION_COMM.Chassis drive = 2;
    case kDrive: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *cmd_msgs_.drive_);
      break;
    }
    case CMD_MSGS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ORION_COMM.Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Command* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ORION_COMM.Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ORION_COMM.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ORION_COMM.Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cmdtype() != 0) {
    set_cmdtype(from.cmdtype());
  }
  switch (from.cmd_msgs_case()) {
    case kDrive: {
      mutable_drive()->::ORION_COMM::Chassis::MergeFrom(from.drive());
      break;
    }
    case CMD_MSGS_NOT_SET: {
      break;
    }
  }
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ORION_COMM.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ORION_COMM.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::Swap(Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Command::InternalSwap(Command* other) {
  std::swap(cmdtype_, other->cmdtype_);
  std::swap(cmd_msgs_, other->cmd_msgs_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_earthBaseToRoverComm_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_earthBaseToRoverComm_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Command

// .ORION_COMM.Commands cmdType = 1;
void Command::clear_cmdtype() {
  cmdtype_ = 0;
}
::ORION_COMM::Commands Command::cmdtype() const {
  // @@protoc_insertion_point(field_get:ORION_COMM.Command.cmdType)
  return static_cast< ::ORION_COMM::Commands >(cmdtype_);
}
void Command::set_cmdtype(::ORION_COMM::Commands value) {
  
  cmdtype_ = value;
  // @@protoc_insertion_point(field_set:ORION_COMM.Command.cmdType)
}

// .ORION_COMM.Chassis drive = 2;
bool Command::has_drive() const {
  return cmd_msgs_case() == kDrive;
}
void Command::set_has_drive() {
  _oneof_case_[0] = kDrive;
}
void Command::clear_drive() {
  if (has_drive()) {
    delete cmd_msgs_.drive_;
    clear_has_cmd_msgs();
  }
}
 const ::ORION_COMM::Chassis& Command::drive() const {
  // @@protoc_insertion_point(field_get:ORION_COMM.Command.drive)
  return has_drive()
      ? *cmd_msgs_.drive_
      : ::ORION_COMM::Chassis::default_instance();
}
::ORION_COMM::Chassis* Command::mutable_drive() {
  if (!has_drive()) {
    clear_cmd_msgs();
    set_has_drive();
    cmd_msgs_.drive_ = new ::ORION_COMM::Chassis;
  }
  // @@protoc_insertion_point(field_mutable:ORION_COMM.Command.drive)
  return cmd_msgs_.drive_;
}
::ORION_COMM::Chassis* Command::release_drive() {
  // @@protoc_insertion_point(field_release:ORION_COMM.Command.drive)
  if (has_drive()) {
    clear_has_cmd_msgs();
    ::ORION_COMM::Chassis* temp = cmd_msgs_.drive_;
    cmd_msgs_.drive_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Command::set_allocated_drive(::ORION_COMM::Chassis* drive) {
  clear_cmd_msgs();
  if (drive) {
    set_has_drive();
    cmd_msgs_.drive_ = drive;
  }
  // @@protoc_insertion_point(field_set_allocated:ORION_COMM.Command.drive)
}

bool Command::has_cmd_msgs() const {
  return cmd_msgs_case() != CMD_MSGS_NOT_SET;
}
void Command::clear_has_cmd_msgs() {
  _oneof_case_[0] = CMD_MSGS_NOT_SET;
}
Command::CmdMsgsCase Command::cmd_msgs_case() const {
  return Command::CmdMsgsCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ORION_COMM

// @@protoc_insertion_point(global_scope)
